const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function migrateCreditCardCategories() {
  console.log('üîÑ Iniciando migra√ß√£o das categorias de cart√£o de cr√©dito...');

  try {
    // 1. Buscar todas as categorias de cart√£o de cr√©dito existentes
    const creditCardCategories = await prisma.creditCardCategory.findMany();
    console.log(`üìã Encontradas ${creditCardCategories.length} categorias de cart√£o de cr√©dito`);

    // 2. Buscar categorias normais existentes
    const normalCategories = await prisma.category.findMany();
    console.log(`üìã Encontradas ${normalCategories.length} categorias normais`);

    // 3. Criar um mapeamento de categorias de cart√£o para categorias normais
    const categoryMapping = new Map();

    for (const ccCategory of creditCardCategories) {
      // Verificar se j√° existe uma categoria normal com o mesmo nome
      let existingCategory = normalCategories.find(
        cat => cat.name.toLowerCase() === ccCategory.name.toLowerCase()
      );

      if (existingCategory) {
        console.log(`üîó Mapeando "${ccCategory.name}" ‚Üí categoria existente "${existingCategory.name}"`);
        categoryMapping.set(ccCategory.id, existingCategory.id);
      } else {
        // Criar uma nova categoria normal baseada na categoria de cart√£o
        const newCategory = await prisma.category.create({
          data: {
            name: ccCategory.name,
            color: ccCategory.color,
            type: 'EXPENSE', // Assumindo que categorias de cart√£o s√£o despesas
          }
        });
        console.log(`‚ûï Criada nova categoria: "${newCategory.name}"`);
        categoryMapping.set(ccCategory.id, newCategory.id);
      }
    }

    // 4. Buscar todas as transa√ß√µes de cart√£o de cr√©dito
    const creditCardTransactions = await prisma.creditCardTransaction.findMany();
    console.log(`üí≥ Encontradas ${creditCardTransactions.length} transa√ß√µes de cart√£o de cr√©dito`);

    // 5. Atualizar as transa√ß√µes de cart√£o para usar as categorias normais
    let updatedCount = 0;
    for (const transaction of creditCardTransactions) {
      const newCategoryId = categoryMapping.get(transaction.categoryId);
      if (newCategoryId) {
        await prisma.creditCardTransaction.update({
          where: { id: transaction.id },
          data: { categoryId: newCategoryId }
        });
        updatedCount++;
      } else {
        console.warn(`‚ö†Ô∏è N√£o foi poss√≠vel mapear categoria para transa√ß√£o ${transaction.id}`);
      }
    }

    console.log(`‚úÖ ${updatedCount} transa√ß√µes de cart√£o atualizadas`);

    // 6. Exibir resumo da migra√ß√£o
    console.log('\nüìä Resumo da migra√ß√£o:');
    console.log(`- Categorias de cart√£o processadas: ${creditCardCategories.length}`);
    console.log(`- Novas categorias criadas: ${Array.from(categoryMapping.values()).length - normalCategories.length}`);
    console.log(`- Transa√ß√µes atualizadas: ${updatedCount}`);

    console.log('\nüéâ Migra√ß√£o conclu√≠da com sucesso!');
    console.log('\n‚ö†Ô∏è PR√ìXIMOS PASSOS:');
    console.log('1. Execute: npx prisma migrate dev --name "unify-categories"');
    console.log('2. Remova a tabela credit_card_categories manualmente se necess√°rio');

  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error);
  } finally {
    await prisma.$disconnect();
  }
}

migrateCreditCardCategories();
